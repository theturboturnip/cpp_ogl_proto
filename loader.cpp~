#include <iostream>
using namespace std;

GLuint LoadShadersIntoProgram(char *vertexPath,char *fragPath,GLuint program=NULL){
  if(program==NULL)
    program=glCreateProgram();
  GLuint vertexShader=LoadShader(vertexPath);
  if(vertexShader!=NULL) 
    glAttachShader(program,vertexShader);
  GLuint fragShader=LoadShader(fragPath);
  if(fragShader!=NULL) 
    glAttachShader(program,fragShader);
}

GLuint LoadShaderFromFile(char *path){
  //Read all text
  streampos size;
  char *shaderCode;
  ifstream file (path,ios::in|ios::ate);
  if (file.is_open()){
    size=file.tellg();
    shaderCode=new char[size];
    file.seekg(0,ios::beg);
    file.read(shaderCode,size);
    file.close();
  }else{
    fprintf(stderr, "File at %s couldn't be read, returning NULL",path);
    return NULL;
  }
  //Compile text
  GLuint ShaderID;
  glShaderSource(ShaderID, 1, &shaderCode,NULL);
  glCompileShader(ShaderID);
  //Make sure compile was successful
  GLint compileResult=GL_FALSE;
  int compileInfoLength;
  glGetShaderiv(ShaderID,GL_COMPILE_STATUS,&Result);
  glGetShaderiv(ShaderID,GL_INFO_LOG_LENGTH,&compileInfoLength);
  if (compileInfoLength>0){
    //Shader has warnings or has failed
    char *ErrorMessage[InfoLogLength+1];
    glGetShaderInfoLog(ShaderID,compileInfoLength,NULL,ErrorMessage);
    if (compileResult==GL_TRUE)
      fprintf(stderr,"Compile of %s succeeded with warnings\n",path);
    else
      fprintf(stderr,"Compile of %s failed\n",path);
    fprintf(stderr,"%s\n",ErrorMessage);
    return NULL;
  }
  //Send Shader ID
  return ShaderID;
}
